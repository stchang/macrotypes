#lang s-exp "../../mlish.rkt"
(require "../rackunit-typechecking.rkt")

;; alternate match that supports nested patterns

(define-type (Test X)
  (A X)
  (B (× X X))
  (C (× X (× X X))))

(typecheck-fail
  (match2 (B (tup 2 3)) with
   [B x -> x]) 
  #:with-msg "clauses not exhaustive; missing: A, C")

(typecheck-fail
  (match2 (B (tup 2 3)) with
   [A x -> x]
   [C (x,y) -> y]
   [B x -> x]) #:with-msg "couldn't unify Int and \\(× Int Int\\)")

(typecheck-fail
  (match2 (B (tup 2 3)) with
   [A x -> (tup x x)]
   [C x -> x]
   [B x -> x])
  #:with-msg "couldn't unify Int and \\(× Int Int\\)")

(check-type
  (match2 (B (tup 2 3)) with
   [A x -> (tup x x)]
   [C (x,y) -> y]
   [B x -> x]) : (× Int Int) -> (list 2 3))

(typecheck-fail
  (match2 (A (tup 2 3)) with
   [A x -> x]) #:with-msg "clauses not exhaustive; missing: B, C")

(check-type
  (match2 (A (tup 2 3)) with
   [B (x,y) -> y]
   [C (x,y) -> x]
   [A x -> x]) : (× Int Int) -> (list 2 3))

(check-type
  (match2 (A (tup 2 3)) with
   [B (x,y) -> y]
   [A x -> x]
   [C (x,y) -> x]) : (× Int Int) -> (list 2 3))

(typecheck-fail
  (match2 (A (tup 2 3)) with
   [B (x,y) -> y]
   [A x -> x]
   [C x -> x]) #:with-msg "couldn't unify Int and \\(× Int Int\\)")

(check-type
  (match2 (A 1) with
   [A x -> x]
   [_ -> -1]) : Int -> 1)

(typecheck-fail
  (match2 (B 1) with
   [B x -> x]) 
  #:with-msg "expected: \\(× X X\\)\n *given: Int")

(check-type
  (match2 (B (tup 2 3)) with
   [B (tup x y) -> (+ x y)]
   [_ -> -1]) : Int -> 5)

(check-type
  (match2 (C (tup 2 (tup 3 4))) with
   [C (tup x (tup y z)) -> (+ x (+ y z))]
   [_ -> -1]) : Int -> 9)

(check-type
  (match2 (C (tup 2 (tup 3 4))) with
   [A x -> x]
   [_ -> 100]) : Int -> 100)



;; lists

(typecheck-fail
  (match2 (list 1) with
   [list x -> x]) #:with-msg "missing nil clause")

(typecheck-fail
  (match2 (list 1) with
   [nil -> 0]
   [list x -> x]) 
  #:with-msg "missing clause for non-empty, arbitrary length list")

(check-type
  (match2 (list 1) with
   [nil -> 0]
   [x :: xs -> x]) : Int -> 1)

(check-type
  (match2 (list 1) with
   [nil -> 0]
   [list x -> x]
   [x :: xs -> x]) : Int -> 1)

(check-type
  (match2 (list 1) with
   [list -> 0]
   [list x -> x]
   [x :: xs -> x]) : Int -> 1)

(check-type
  (match2 (list 1) with
   [list x -> x]
   [_ -> 0]) : Int -> 1)

(check-type
  (match2 (list 1) with
   [x :: xs -> x]
   [nil -> 0]) : Int -> 1)

(check-type
  (match2 (list 1) with
   [_ -> -1]
   [list x -> x]
   [nil -> 0]) : Int -> -1)

(check-type
  (match2 (list 1) with
   [_ -> -1]
   [list x -> x]
   [list -> 0]) : Int -> -1)

(check-type
    (match2 (list 1) with
     [_ -> 0]) : Int -> 0)

(typecheck-fail
    (match2 (list 1) with
      [nil -> 0]) 
  #:with-msg "missing clause for non-empty, arbitrary length list")

(check-type
  (match2 (list 1 2) with
   [list x y -> (+ x y)]
   [_ -> 0]) : Int -> 3)

(check-type
  (match2 (list 1 2) with
   [list -> 0]
   [list x y -> (+ x y)]
   [_ -> -1]) : Int -> 3)

(check-type
  (match2 (list (list 3 4) (list 5 6)) with
   [list -> 0]
   [list (list w x) (list y z) -> (+ (+ x y) (+ z w))]
   [_ -> -1]) : Int -> 18)

(check-type
  (match2 (list (tup 3 4) (tup 5 6)) with
   [list -> 0]
   [list (tup w x) (tup y z) -> (+ (+ x y) (+ z w))]
   [_ -> -1]) : Int -> 18)

(check-type
  (match2 (nil {Int}) with
   [nil -> 0]
   [list x y -> (+ x y)]
   [_ -> -1]) : Int -> 0)

(check-type
  (match2 (list 1 2) with
   [nil -> 0]
   [list x y -> (+ x y)]
   [_ -> -1]) : Int -> 3)

(check-type
  (match2 (list 1 2 3) with
   [nil -> 0]
   [list x y -> (+ x y)]
   [_ -> -1]) : Int -> -1)

;; 0-arity constructors
(define-type (Test2 X)
  AA
  (BB X))

(check-type
  (match2 (BB 1) with
   [AA -> 0]
   [BB x -> x]) : Int -> 1)

(check-type 
   (match2 (BB (AA {Int})) with
    [AA -> 0]
    [BB AA -> 1]
    [_ -> 2]) : Int -> 1)

;; drop parens around 0-arity constructors
(check-type
  (match2 (BB 1) with
   [AA -> 0]
   [BB x -> x]) : Int -> 1)

(check-type 
   (match2 (BB (AA {Int})) with
    [AA -> 0]
    [BB AA -> 1]
    [_ -> 2]) : Int -> 1)

;; nicer cons pattern syntax (::)
(check-type
   (match2 (list 1 2) with
    [nil -> -1]
    [x :: xs -> x]) 
  : Int -> 1)

(check-type
   (match2 (list 1 2) with
    [nil -> -1]
    [x :: y :: xs -> y]) : Int -> 2)

(check-type
   (match2 (list (tup 1 2) (tup 3 4)) with
    [nil -> -1]
    [(tup x y) :: (tup a b) :: xs -> (+ a b)]) : Int -> 7)

(check-type
   (match2 (list (list 2 3 4) (list 5 6 7) (list 9 10)) with
    [nil -> -1]
    [x :: (y :: z :: zs) :: xs -> z]) : Int -> 6)

(check-type
   (match2 (list (list 2 3 4) (list 5 6 7) (list 9 10)) with
    [nil -> -1]
    [x :: (list a b c) :: xs -> c]) : Int -> 7)

(typecheck-fail
    (match2 (list (list #t #f)) with
      [nil -> -1]
      [(list x y) :: tl -> (+ x y)])
  #:with-msg "expected: Int\n *given: Bool")

;; comma tup pattern syntax

(check-type
 (match2 (tup 1 2) with
  [(x,y) -> (+ x y)]) : Int -> 3)

(check-type
 (match2 (tup 1 2 4) with
  [(_,y,z) -> (+ z y)]) : Int -> 6)

(check-type
 (match2 (list (tup 1 2) (tup 3 4) (tup 5 6)) with
  [(x,y) :: (a,b) :: rst -> (+ y a)]
  [_ -> -1]) : Int -> 5)

(check-type
 (match2 (list (tup (BB 1) (AA {Int})) (tup (BB 2) (AA {Int}))) with
  [((BB x),AA) :: ((BB y),AA) :: rst -> (+ y x)]
  [_ -> -1]) : Int -> 3)

(check-type 
    (match2 (tup (tup (tup 1 2) (tup 3)) (tup 4 (tup 6 7))) with
     [(((x,y),z),(a,(b,c))) -> (+ c y)]) : Int -> 9)

(check-type 
    (match2 (tup (tup (tup 1 2) (tup 3)) (tup 4 (tup 6 7))) with
     [(((x,y),z),(_,(_,c))) -> (+ c y)]) : Int -> 9)

(check-type 
    (match2 (tup (tup (tup 1 2) (tup 3)) (tup 4 (tup 6 7))) with
     [(((_,y),_),(_,(_,c))) -> (+ c y)]) : Int -> 9)

(typecheck-fail 
    (match2 (tup (BB 1) (BB 2)) with
     [((BB x),(BB y)) -> (+ x y)])
  #:with-msg "clauses not exhaustive; missing: AA")

;; TODO: should tail
#;(typecheck-fail 
    (match2 (tup (BB 1) (BB 2)) with
     [((BB x),(BB y)) -> (+ x y)]
     [(AA,AA) -> 0])
  #:with-msg "clauses not exhaustive; missing: AA")

;; falls off; runtime match exception
#;(match2 (tup (BB 2) (AA {Int})) with
 [((BB x),(BB y)) -> (+ x y)]
 [(AA,AA) -> 0])

(check-type 
    (match2 (tup (BB 1) (BB 2)) with
     [((BB x),(BB y)) -> (+ x y)]
     [_ -> -1]) : Int -> 3)
